<?xml version="1.0" encoding="UTF-8"?>
<web-app id="PAW" version="2.4"
         xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee
http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

    <display-name>PAW test application</display-name>

    <!-- Si queremos que cuando ocurre cierto error code, redirigir a cierta página, podemos hacerlo así: -->
    <!-- <error-page>
        <error-code>500</error-code>
        <location>/500</location>
    </error-page> -->

    <context-param>
        <param-name>contextClass</param-name>
        <param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
    </context-param>
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            ar.edu.itba.paw.webapp.config.WebConfig,
            ar.edu.itba.paw.webapp.config.WebAuthConfig
        </param-value>
    </context-param>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--
        Tenemos dos formas de mapear los archivos css. Una es la que está habilitada, que es agregando resource handlers
        en WebConfig.addResourceHandlers(), y la otra es con un servlet mapping como se muestra en este comentario:
    -->
    <!--<servlet-mapping>
      <servlet-name>default</servlet-name>
      <url-pattern>*.css</url-pattern>
    </servlet-mapping>-->

    <!--
        Agregamos un filtro de requests para spring-security. El filtro es de tipo DelegatingFilterProxy, que lo que
        hace es delegar el filtrado a otro. En este caso, lo delega a springSecurityFilterChain.
    -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <!-- También debemos especificar sobre qué URLs se aplica el filtro: -->
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- Leer los comentarios en IssueServiceImpl.java, dentro de reportIssue(), para entender este filter -->
    <!-- <filter>
        <filter-name>openEntityManagerInView</filter-name>
        <filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>openEntityManagerInView</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping> -->
    <!--
        Cómo no estamos renderizando views, este filter pueden no necesitarlo más. Si necesitan cargar cosas lazy a
        medida que se construyen sus DTOs, lo pueden descomentar.
    -->

    <!--
        Jersey se puede mappear como un servlet o como un filter. La ventaja de usar un filter es que los endpoints con
        los que no sabe qué hacer los puede dejar pasar, entonces cosas como static content las termina manejando el
        default servlet. Las dos son viables, pero requieren configuraciones distintas. Acá vamos a usar filter.
        IMPORTANTÍSIMO: Los filters se ejecutan en orden, por ende el filter de Jersey TIENE QUE ESTAR DESPUÉS DEL DE
        SPRING SECURITY!!
    -->
    <filter>
        <filter-name>jersey</filter-name>
        <filter-class>org.glassfish.jersey.servlet.ServletContainer</filter-class>
        <init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>
                ar.edu.itba.paw.webapp.controller,
                ar.edu.itba.paw.webapp.mapper
            </param-value>
        </init-param>
        <!-- Pido que cuando falla alguna validación que lo ponga en la respuesta http -->
        <!--<init-param> Lo reemplazamos por exception mappers
            <param-name>jersey.config.beanValidation.enableOutputValidationErrorEntity.server</param-name>
            <param-value>true</param-value>
        </init-param> -->
        <!-- Especifica qué hacer cuando no encuentra un handler para un endpoint -->
        <init-param>
            <param-name>jersey.config.servlet.filter.forwardOn404</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>jersey</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>